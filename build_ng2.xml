<?xml version="1.0"?>

<!-- 
  This program and the accompanying materials are
  made available under the terms of the Eclipse Public License v2.0 which accompanies
  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html
  
  SPDX-License-Identifier: EPL-2.0
  
  Copyright Contributors to the Zowe Project.
-->
<project name="build_ng2" default="buildng2" xmlns:if="ant:if" xmlns:unless="ant:unless">
  <import file="common.xml"/>
  <property name="traverseTarget" value="buildPlugin"/>
  <property name="antTarget" value="build"/>
  
  <target name="buildng2" depends="getDesktopDir, platformBuild, bootstrapBuild, desktopBuild, traverse">
    <antcall target="npmInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-shared/src/logging"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-shared/src/logging"/>
      <param name="buildType" value="build"/>
    </antcall>
    <antcall target="npmInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-shared/src/obfuscator"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-shared/src/obfuscator"/>
      <param name="buildType" value="build"/>
    </antcall>

    <antcall target="npmInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/system-apps/admin-notification-app/webClient"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/system-apps/admin-notification-app/webClient"/>
      <param name="buildType" value="build"/>
    </antcall>

    <antcall target="npmInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/system-apps/web-browser-app/webClient"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/system-apps/web-browser-app/webClient"/>
      <param name="buildType" value="build"/>
    </antcall>
    <antcall target="npmInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/system-apps/web-browser-app/nodeServer"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/system-apps/web-browser-app/nodeServer"/>
      <param name="buildType" value="build"/>
    </antcall>

    <antcall target="npmRunI18n">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/virtual-desktop"/>
    </antcall>
    
    <copy file="${capstone}/zlux-app-manager/virtual-desktop/node_modules/requirejs/require.js" tofile="${capstone}/zlux-app-manager/virtual-desktop/web/require.js" unless:set="isZos"/>
    
    <exec if:set="isZos" executable="sh">
      <arg line="-c 'cp -p ${capstone}/zlux-app-manager/virtual-desktop/node_modules/requirejs/require.js ${capstone}/zlux-app-manager/virtual-desktop/web/require.js'"/>
    </exec>

  </target>

  <target name="removeSource">
    <!-- <delete><fileset .../>...</delete> is extremely slow -->
    <for param="path">
      <path>
        <dirset dir="${capstone}" defaultexcludes="false">
          <include name="**/.*"/>
          <include name="**/node_modules"/>
          <include name="**/dco-signoffs"/>
          <exclude name="zlux-app-server/node_modules/**"/>
          <exclude name="zlux-app-manager/system-apps/*/lib/node_modules"/>
          <exclude name="zlux-server-framework/node_modules/**"/>
        </dirset>
        <dirset dir="${capstone}" defaultexcludes="false">
          <include name="**/src"/>
          <include name="**/dts"/>
          <include name="**/nodeServer"/>
          <include name="**/webClient"/>
          <exclude name="**/zssServer/**"/>
          <exclude name="zlux-app-manager/virtual-desktop/**"/>
          <exclude name="zlux-platform/interface/**"/>
          <exclude name="zlux-app-server/node_modules/**"/>
          <exclude name="zlux-server-framework/node_modules/**"/>
          <exclude name="zlux-shared/**"/>
        </dirset>
        <fileset dir="${capstone}" defaultexcludes="false">
          <include name="**/.*"/>
          <include name="**/sonar-project.properties"/>
          <exclude name="zlux-app-server/node_modules/**"/>
          <exclude name="zlux-server-framework/node_modules/**"/>
        </fileset>
        <fileset dir="${capstone}" defaultexcludes="false">
          <include name="**/*.ts"/>
          <include name="**/tsconfig*.json"/>
          <include name="**/tslint.json"/>
          <include name="**/webpack.config.js"/>
          <exclude name="zlux-app-server/**"/>
          <exclude name="zlux-build/**"/>
          <exclude name="**/node_modules/**"/>
          <exclude name="zlux-app-manager/virtual-desktop/**"/>
          <exclude name="zlux-platform/interface/**"/>
          <exclude name="zlux-shared/src/**"/>
        </fileset>
      </path>
      <sequential>
        <delete dir="@{path}"/>
        <delete file="@{path}"/>
      </sequential>
    </for>
  </target>

  <target name="removeZssSource">
    <!-- <delete><fileset .../>...</delete> is extremely slow -->
    <for param="path">
      <path>
        <dirset dir="${capstone}" defaultexcludes="false">
          <include name="**/zssServer"/>
        </dirset>
      </path>
      <sequential>
        <delete dir="@{path}"/>
        <delete file="@{path}"/>
      </sequential>
    </for>
  </target>
  
  <target name="getDesktopDir">
    <dirname file="${capstone}/zlux-app-manager/virtual-desktop/package.json" property="MVD_DESKTOP_DIR"/>
    <echo message="MVD_DESKTOP_DIR is ${MVD_DESKTOP_DIR}"/>
    <echo message="Plugin directory is ${pluginDir}"/>
  </target>
  
  <target name="buildPlugin" depends="antPlugin" unless="build.xmlRan">
    <property name="absolutePlugin" location="${capstone}/zlux-app-server/lib/${plugin}"/>
    <if>
      <not>
        <or>
          <equals arg1="${plugin}" arg2="../../zlux-app-manager/bootstrap"/>
          <equals arg1="${plugin}" arg2="../../zlux-app-manager/virtual-desktop"/>
        </or>
      </not>
      <then>
        <antcall target="npmInstall" unless:set="noInstall">
          <param name="packagejson.Location" value="${capstone}/zlux-app-server/lib/${plugin}"/>
        </antcall>
        <antcall target="npmBuild">
          <param name="packagejson.Location" value="${capstone}/zlux-app-server/lib/${plugin}"/>
          <param name="buildType" value="build"/>
        </antcall>
      </then>
    </if>
  
    <for param="subfolder">
      <path>
        <dirset dir="${capstone}/zlux-app-server/lib/${plugin}" includes="*"/>
      </path>
      <sequential>
        <antcall target="npmInstall" unless:set="noInstall">
          <param name="packagejson.Location" value="@{subfolder}"/>
        </antcall>
        <antcall target="npmBuild">
          <param name="packagejson.Location" value="@{subfolder}"/>
          <param name="buildType" value="build"/>
        </antcall>
      </sequential>
    </for>
  </target>

  <target name="platformBuild">
    <antcall target="npmInstall" unless:set="noInstall">  
      <param name="packagejson.Location" value="${capstone}/zlux-platform"/>
    </antcall>
  </target>
  
  <target name="bootstrapBuild"><!--We could pass different args for bootstrap if we wanted-->
    <antcall target="npmInstall" unless:set="noInstall">  
      <param name="packagejson.Location" value="${capstone}/zlux-server-framework"/>
    </antcall>
    <antcall target="npmInstall" unless:set="noInstall">  
      <param name="packagejson.Location" value="${capstone}/zlux-app-server"/>
    </antcall>
    <antcall target="npmInstall" unless:set="noInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/bootstrap"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/bootstrap"/>
      <param name="buildType" value="build"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-server-framework"/>
      <param name="buildType" value="build"/>
    </antcall>    
  </target>
  
  <target name="desktopBuild"><!--We could pass different args for virtual-desktop if we wanted-->
    <antcall target="npmInstall" unless:set="noInstall">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/virtual-desktop"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/virtual-desktop"/>
      <param name="buildType" value="build:externals"/>
    </antcall>
    <antcall target="npmBuild">
      <param name="packagejson.Location" value="${capstone}/zlux-app-manager/virtual-desktop"/>
      <param name="buildType" value="build"/>
    </antcall>
  </target>
  
  <target name="npmInstall" depends="package.jsonExists" if="package.jsonPresent">
    <exec executable="cmd" 
          dir="${packagejson.Location}" 
          osfamily="windows"
          resultproperty="rc"
          searchpath="true">
      <arg line="/c npm install"/>
    </exec>
    <exec executable="npm" 
          dir="${packagejson.Location}"
          osfamily="unix"
          resultproperty="rc"
          searchpath="true">
      <arg line="install"/>
    </exec>
    
    <echo message="Result of install in ${packagejson.Location} is: ${rc}"/>
    <if>
      <not>
        <equals arg1="${rc}" arg2="0"/>
      </not>
      <then>
        <fail message="Error with npm install in ${packagejson.Location}" />
      </then>
    </if>
  </target>

  <target name="npmRunI18n" depends="package.jsonExists" if="package.jsonPresent">
    <exec executable="cmd"
          dir="${packagejson.Location}"
          osfamily="windows"
          resultproperty="rc"
          searchpath="true">
      <arg line="/c npm run i18n"/>
    </exec>
    <exec executable="npm"
          dir="${packagejson.Location}"
          osfamily="unix"
          resultproperty="rc"
          searchpath="true">
      <arg line="run i18n"/>
    </exec>

    <echo message="Result of i18n in ${packagejson.Location} is: ${rc}"/>
    <if>
      <not>
        <equals arg1="${rc}" arg2="0"/>
      </not>
      <then>
        <fail message="Error with npm run i18 in ${packagejson.Location}" />
      </then>
    </if>
  </target>
  
  <target name="npmBuild" depends="package.jsonExists" if="package.jsonPresent">
    <exec executable="cmd" 
          dir="${packagejson.Location}" 
          osfamily="windows" 
          resultproperty="rc"
          searchpath="true">
      <arg line="/c npm run ${buildType}"/>
      <env key="MVD_DESKTOP_DIR" value="${MVD_DESKTOP_DIR}"/>
    </exec>
    <exec executable="npm" 
          dir="${packagejson.Location}" 
          osfamily="unix"  
          resultproperty="rc"
          searchpath="true">
      <arg line="run ${buildType}"/>
      <env key="MVD_DESKTOP_DIR" value="${MVD_DESKTOP_DIR}"/>
    </exec>
    
    <echo message="Result of build in ${packagejson.Location} is: ${rc}"/>
    <if>
      <not>
        <equals arg1="${rc}" arg2="0"/>
      </not>
      <then>
        <fail message="Error with npm run ${buildType} in ${packagejson.Location}" />
      </then>
    </if>
  </target>
  
  <target name="package.jsonExists">
    <available file="${packagejson.Location}/package.json" property="package.jsonPresent"/>
  </target>
 
</project>

<!-- 
  This program and the accompanying materials are
  made available under the terms of the Eclipse Public License v2.0 which accompanies
  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html
  
  SPDX-License-Identifier: EPL-2.0
  
  Copyright Contributors to the Zowe Project.
-->
